# OpenSSF Scorecard supply-chain security — hardened and pinned
# =============================================================================
# What this workflow does (high level):
#   1) Job "analysis": runs OpenSSF Scorecard against your repo and writes SARIF.
#      This job contains only uses steps to satisfy Scorecard’s
#      workflow verification. If you add a run step here, publishing
#      to the OpenSSF webapp will fail with HTTP 400.
#   2) Job "upload-to-code-scanning": downloads the SARIF and uploads it to
#      GitHub Code Scanning (Security tab). This keeps 'security-events: write'
#      scoped to a tiny job surface.
#
# Why it’s structured this way (best practices):
#   - Default-deny permissions at the workflow level (read-only); jobs elevate only what they need.
#   - Pin third-party actions to full commit SHAs (reproducible, tamper-resistant).
#   - Concurrency cancels superseded runs to avoid CI pile-ups.
#   - Timeouts cap spend and fail fast.
#   - Harden the runner’s outbound network (egress).
#   - Scoped checkout credentials.
#   - Explicit runner VM image (ubuntu-24.04).
#
# Maintenance tips:
#   - Keep the Scorecard job “uses-only”. Add any custom scripting to a separate job if needed.

name: Scorecard supply-chain security

on:
  # Refreshes the Branch-Protection check when repository rules change
  branch_protection_rule:

  # Weekly maintenance run so “Maintained” and other checks stay fresh
  schedule:
    - cron: '40 16 * * 1'

  # Run on pushes to the default branch (publishing supported only from default)
  push:
    branches: [ "**" ] # [ "main" ] 

  # Run on PRs so contributors see findings before merge
  pull_request:
    branches: [ "**" ] # [ "main" ]
    paths:
      # Narrow these as you like; leaving **/* ensures checks run when any file changes
      - "**/*"
      - ".github/workflows/scorecard.yml"

# Cancel older in-flight runs for the same ref/PR (prevents CI pile-ups)
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

# Default-deny at the workflow level (read-only). Jobs elevate minimally.
permissions:
  contents: read

jobs:
  # ────────────────────────────── Job 1: Scorecard analysis (USES-ONLY) ──────────────────────────────
  analysis:
    name: Scorecard analysis
    runs-on: ubuntu-24.04                 # Fixed runner image for reproducibility
    timeout-minutes: 15                   # Fail fast instead of hanging indefinitely

    # Least privilege here:
    # - contents: read -> checkout
    # - id-token: write -> required if `publish_results: true` on default branch (public repos)
    # - actions: read -> lets Scorecard evaluate CI-Tests check
    # - pull-requests: read -> improves Code-Review related checks

    permissions:
      contents: read
      id-token: write
      actions: read           # extra permission to let CI-Tests run
      pull-requests: read     # extra permission for Code-Review checks

    # This job must contain only `uses:` steps (no `run:`) to pass Scorecard’s workflow verification
    steps:
      # Harden network egress to reduce data exfiltration risk if a step is compromised.
      # Start in audit mode (learn endpoints). Later, switch to:
      #   egress-policy: block
      #   allowed-endpoints: >
      #     api.github.com:443
      #     uploads.github.com:443
      #     objects.githubusercontent.com:443
      #     github.com:443
      #     api.securityscorecards.dev:443     # required for publishing results to OpenSSF
      #     storage.googleapis.com:443          # for Google-hosted artifacts

      - name: Harden runner (egress audit)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      # Checkout with no persisted credentials 
      - name: Checkout code 
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          fetch-depth: 0                  # Some checks benefit from history (e.g., Maintained)
          submodules: recursive           # ensures submodules are scanned (Binary-Artifacts, etc.)
          lfs: true                       # ensures LFS files are visible to Scorecard

      # Run Scorecard and write SARIF. Publishing to OpenSSF works only on the default
      # branch and for public repos.
      - name: Run Scorecard
        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # v2.4.2
        with:
          results_file: results.sarif
          results_format: sarif
          # Publish externally only when on the default branch (public repos will publish; private will ignore)
          publish_results: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          # Optional: enable Branch-Protection check on public repos or use in private repos with a PAT:
          # repo_token: ${{ secrets.SCORECARD_TOKEN }}
          # Optional: if your .gitattributes marks files export-ignore
          # file_mode: git

      # Store SARIF so the next job can upload it and so you have an auditable copy
      - name: Upload SARIF as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: scorecard-sarif
          path: results.sarif
          retention-days: 14              # tune to your policy

  # ─────────────────────────── Job 2: Upload to GitHub Code Scanning ───────────────────────────
  upload-to-code-scanning:
    name: Upload Scorecard SARIF to Code Scanning
    needs: analysis
    runs-on: ubuntu-24.04
    timeout-minutes: 5

    # Only this job needs to write security events (least privilege)
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Harden runner (egress audit)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      # Pull down the SARIF produced by Job 1
      - name: Download SARIF artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: scorecard-sarif
          path: .

      # Upload SARIF to the Security tab. Category keeps tools distinct.
      - name: Upload to Code Scanning
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        with:
          sarif_file: results.sarif
          category: ossf-scorecard
